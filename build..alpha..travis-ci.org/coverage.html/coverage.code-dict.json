{"/home/travis/build/npmtest/node-npmtest-traceur/test.js":"/* istanbul instrument in package npmtest_traceur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-traceur/lib.npmtest_traceur.js":"/* istanbul instrument in package npmtest_traceur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_traceur = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_traceur = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-traceur/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-traceur && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_traceur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_traceur\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_traceur.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_traceur.rollup.js'] =\n            local.assetsDict['/assets.npmtest_traceur.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_traceur.__dirname +\n                    '/lib.npmtest_traceur.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/api.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Node.js API\n//\n// This is what you get when you `require('traceur')`.\n// It's suppose to be used by custom scripts or tools such as Grunt or Karma.\n\n'use strict';\n\nvar path = require('path');\nvar traceur = require('./traceur.js');\n\nvar NodeCompilerModule = require('./NodeCompiler.js');\nvar NodeCompiler = NodeCompilerModule.NodeCompiler;\n\nvar recursiveModuleCompile = require('./recursiveModuleCompile.js');\nvar compileAllJsFilesInDir = require('./compileAllJsFilesInDir.js');\n\nvar Compiler = traceur.Compiler;\n\nfunction compile(src, options, sourceName, outputName) {\n  sourceName = sourceName || '<compile-source>';\n  outputName = outputName || '<compile-output>';\n  return new NodeCompiler(Compiler.commonJSOptions(options)).\n      compile(src, sourceName, outputName);\n}\n\n// The absolute path to traceur-runtime.js -- the file that should be executed\n// if you want to run Traceur-compiled scripts when the compiler isn't present.\nvar RUNTIME_PATH = path.join(__dirname, '../../bin/traceur-runtime.js').replace(/\\\\/g, '/');\n\n// extend traceur module\nmodule.exports = {\n  __proto__: traceur,\n  recursiveModuleCompileToSingleFile:\n      recursiveModuleCompile.recursiveModuleCompileToSingleFile,\n  forEachRecursiveModuleCompile:\n      recursiveModuleCompile.forEachRecursiveModuleCompile,\n  compileAllJsFilesInDir:\n    compileAllJsFilesInDir.compileAllJsFilesInDir,\n  NodeCompiler: NodeCompiler,\n  compile: compile,\n  commonJSOptions: Compiler.commonJSOptions,\n  amdOptions: Compiler.amdOptions,\n  closureOptions: Compiler.closureOptions,\n  RUNTIME_PATH: RUNTIME_PATH\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/traceur.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar filename = '../../bin/traceur.js';\nfilename = path.join(path.dirname(module.filename), filename);\nvar data = fs.readFileSync(filename, 'utf8');\nif (!data)\n  throw new Error('Failed to import ' + filename);\n\nmodule._compile(data, filename);\n\n// traceur is a module and thus frozen.\nmodule.exports = {\n  __proto__: traceur,\n  get require() {\n    return require('./require.js');\n  },\n  get selfCompiledFilename() {\n    return filename;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/NodeCompiler.js":"// Copyright 2014 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Node.js API\n//\n// This is what you get when you `require('traceur')`.\n// It's suppose to be used by custom scripts or tools such as Grunt or Karma.\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('./file-util.js');\nvar writeFile = util.writeFile;\nvar traceur = require('./traceur.js');\n\nvar Compiler = traceur.Compiler;\n\nfunction NodeCompiler(options, sourceRoot) {\n  sourceRoot = sourceRoot || process.cwd();\n  Compiler.call(this, options, sourceRoot);\n}\n\nNodeCompiler.prototype = {\n  __proto__: Compiler.prototype,\n\n  writeTreeToFile: function(tree, filename) {\n    filename = this.normalize(filename);\n    var compiledCode = this.write(tree, filename);\n    if (this.options_.sourceMaps === 'file') {\n      var sourcemap = this.getSourceMap();\n      if (sourcemap) {\n        var mapName = this.sourceMappingURL(filename);\n        // Write the map file next to the output file.\n        mapName = path.resolve(path.dirname(filename), mapName);\n        writeFile(mapName, sourcemap);\n      }\n    }\n\n    writeFile(filename, compiledCode);\n  },\n\n  compileSingleFile: function(inputFilePath, outputFilePath, errback) {\n    inputFilePath = this.normalize(inputFilePath);\n    outputFilePath = this.normalize(outputFilePath);\n    fs.readFile(inputFilePath, function(err, contents) {\n      if (err) {\n        errback(err);\n        return;\n      }\n\n      var parsed = this.parse(contents.toString(), inputFilePath);\n      this.writeTreeToFile(this.transform(parsed, inputFilePath),\n                           outputFilePath);\n    }.bind(this));\n  },\n\n  sourceMappingURL: function(filename) {\n    if (this.options_.sourceMaps === 'inline') {\n      var base64sm = new Buffer(this.getSourceMap()).toString('base64');\n      return 'data:application/json;base64,' + base64sm;\n    }\n    return Compiler.prototype.sourceMappingURL.call(this, filename);\n  }\n};\n\n\nmodule.exports = {\n  NodeCompiler: NodeCompiler\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/file-util.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar fs = require('fs');\nvar path = require('path');\n\nfunction existsSync(p) {\n  return fs.existsSync ? fs.existsSync(p) : path.existsSync(p);\n}\n\n/**\n * Recursively makes all directoires, similar to mkdir -p\n * @param {string} dir\n */\nfunction mkdirRecursive(dir) {\n  var parts = path.normalize(dir).split(path.sep);\n  dir = '';\n  for (var i = 0; i < parts.length; i++) {\n    dir += parts[i] + path.sep;\n    if (!existsSync(dir)) {\n      fs.mkdirSync(dir, 0x1FD); // 0775 permissions\n    }\n  }\n}\n\n/**\n * Removes the common prefix of basedir and filedir from filedir\n * @param {string} basedir\n * @param {string} filedir\n */\nfunction removeCommonPrefix(basedir, filedir) {\n  var baseparts = basedir.split(path.sep);\n  var fileparts = filedir.split(path.sep);\n\n  var i = 0;\n  while (i < fileparts.length && fileparts[i] === baseparts[i]) {\n    i++;\n  }\n  return fileparts.slice(i).join(path.sep);\n}\n\nfunction writeFile(filename, contents) {\n  // Compute the output path\n  var outputdir = fs.realpathSync(process.cwd());\n  mkdirRecursive(path.dirname(filename));\n  var filedir = fs.realpathSync(path.dirname(filename));\n  filedir = removeCommonPrefix(outputdir, filedir);\n  outputdir = path.join(outputdir, filedir);\n\n  mkdirRecursive(outputdir);\n  var outputfile = path.join(outputdir, path.basename(filename));\n  fs.writeFileSync(outputfile, contents, 'utf8');\n}\n\nfunction normalizePath(s) {\n  return path.sep == '\\\\' ? s.replace(/\\\\/g, '/') : s;\n}\n\nexports.mkdirRecursive = mkdirRecursive;\nexports.normalizePath = normalizePath;\nexports.removeCommonPrefix = removeCommonPrefix;\nexports.writeFile = writeFile;\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/recursiveModuleCompile.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('rsvp').Promise;\nvar nodeLoader = require('./nodeLoader.js');\nvar util = require('./file-util.js');\nvar normalizePath = util.normalizePath;\nvar mkdirRecursive = util.mkdirRecursive;\nvar NodeCompiler = require('./NodeCompiler.js').NodeCompiler;\n\nvar cwd = process.cwd();\n\nfunction revertCwd() {\n  process.chdir(cwd);\n}\n\nfunction recursiveModuleCompileToSingleFile(outputFile, includes, options) {\n  var resolvedOutputFile = path.resolve(outputFile);\n  var outputDir = path.dirname(resolvedOutputFile);\n\n  // Resolve includes before changing directory.\n  var resolvedIncludes = includes.map(function(include) {\n    include.name = path.resolve(include.name);\n    include.rootModule = true;\n    return include;\n  });\n\n  options.bundle = includes.length > 1;\n  var compiler = new NodeCompiler(options);\n\n  mkdirRecursive(outputDir);\n  process.chdir(outputDir);\n  // Make includes relative to output dir so that sourcemap paths are correct.\n  resolvedIncludes = resolvedIncludes.map(function(include) {\n    include.name = normalizePath(path.relative(outputDir, include.name));\n    return include;\n  });\n\n  return recursiveModuleCompile(resolvedIncludes, options)\n      .then(function(tree) {\n        compiler.writeTreeToFile(tree, resolvedOutputFile);\n      }).then(revertCwd, function(err) {\n        revertCwd();\n        throw err;\n      });\n}\n\nfunction forEachRecursiveModuleCompile(outputDir, includes, options) {\n  var outputDir = path.resolve(outputDir);\n  var compiler = new NodeCompiler(options);\n  function getPromise (input) {\n    return recursiveModuleCompile([input], options).then(function(tree) {\n      var outputFileName = path.join(outputDir, input.name);\n      compiler.writeTreeToFile(tree, outputFileName);\n    });\n  }\n  return Promise.all(includes.map(getPromise));\n}\n\nvar TraceurLoader = traceur.loader.TraceurLoader;\nvar InlineLoaderCompiler = traceur.loader.InlineLoaderCompiler;\nvar Options = traceur.util.Options;\n\n/**\n * Chains .then() calls along a list after applying a function. The function\n * is not called on a value in the list until the promise generated by calling\n * the function on the previous value in the list completes.\n *\n * @param {Array.<T>} list\n * @param {function(T): Promise<?>} f A function applied to each item on the\n *     list.\n * @return {Promise<?>} A promise where each promise f(v), for each v in the\n *     list has completed.\n */\nfunction sequencePromises(list, f) {\n  var result = Promise.resolve();\n  list.forEach(function (item) {\n    result = result.then(function() { return f(item); });\n  });\n  return result;\n}\n\n/**\n * Compiles the files in \"fileNamesAndTypes\" along with any associated modules,\n * into a single js file, in module dependency order.\n *\n * @param {Array<Object>} fileNamesAndTypes The list of {name, type}\n *     to compile and concat; type is 'module' or 'script'\n * @param {Object} options A container for misc options. 'referrer' is the\n *     only currently available option.\n * @param {Function} callback Callback used to return the result. A null result\n *     indicates that recursiveModuleCompile has returned successfully from a\n *     non-compile request.\n * @param {Function} errback Callback used to return errors.\n */\nfunction recursiveModuleCompile(fileNamesAndTypes, options) {\n  var referrerName = options && options.referrer;\n\n  var basePath = path.resolve('./') + '/';\n  basePath = basePath.replace(/\\\\/g, '/');\n\n  var elements = [];\n  var loaderCompiler = new InlineLoaderCompiler(elements);\n\n  var loader = new TraceurLoader(nodeLoader, basePath, loaderCompiler);\n\n  function appendEvaluateModule(name) {\n    var normalizedName =\n        $traceurRuntime.ModuleStore.normalize(name, referrerName);\n    // Create tree for $traceurRuntime.getModule('normalizedName');\n    var moduleModule = traceur.codegeneration.module;\n    var tree = moduleModule.createModuleEvaluationStatement(normalizedName);\n    elements.push(tree);\n  }\n\n  function loadInput(input) {\n    var doEvaluateModule = false;\n    var loadFunction = loader.import;\n    var name = input.name;\n\n    var optionsCopy = new Options(options); // Give each load a copy of options.\n\n    if (input.type === 'script') {\n      loadFunction = loader.loadAsScript;\n    } else if (optionsCopy.modules === 'bootstrap') {\n      doEvaluateModule = true;\n    }\n\n    var loadOptions = {\n      referrerName: referrerName,\n      metadata: {\n        traceurOptions: optionsCopy,\n        rootModule: input.rootModule && input.name\n      }\n    };\n\n    return loadFunction.call(loader, name, loadOptions).then(function() {\n      if (doEvaluateModule) {\n        appendEvaluateModule(name);\n      }\n    });\n  }\n\n  return sequencePromises(fileNamesAndTypes, loadInput).then(function() {\n    return loaderCompiler.toTree();\n  });\n}\n\nexports.recursiveModuleCompileToSingleFile = recursiveModuleCompileToSingleFile;\nexports.forEachRecursiveModuleCompile = forEachRecursiveModuleCompile;\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/nodeLoader.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar fs = require('fs');\n\nfunction stripShebang(data) {\n  if (/^#!/.test(data))\n    data = '//' + data;\n  return data;\n}\n\nvar nodeLoader = {\n  load: function(url, callback, errback) {\n    fs.readFile(url, 'utf8', function(err, data) {\n      if (err) {\n        err.message = err.message.replace('ENOENT, open', 'File not found');\n        errback(err);\n      } else {\n        callback(stripShebang(data));\n      }\n    });\n\n    // Returns an abort function.\n    return function() {\n      callback = function() {};\n    };\n  }\n};\n\nmodule.exports = nodeLoader;\n","/home/travis/build/npmtest/node-npmtest-traceur/traceur/src/node/compileAllJsFilesInDir.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar glob = require('glob');\nvar path = require('path');\nvar NodeCompiler = require('./NodeCompiler.js').NodeCompiler;\n\nfunction compileAllJsFilesInDir(inputDir, outputDir, options) {\n  inputDir = path.normalize(inputDir).replace(/\\\\/g, '/');\n  outputDir = path.normalize(outputDir).replace(/\\\\/g, '/');\n  glob(inputDir + '/**/*.js', {}, function (er, files) {\n    if (er)\n      throw new Error('While scanning ' + inputDir + ': ' + er);\n\n    files.forEach(function(inputFilePath) {\n      var outputFilePath = inputFilePath.replace(inputDir, outputDir);\n      var compiler = new NodeCompiler(options);\n      compiler.compileSingleFile(inputFilePath, outputFilePath, function(err) {\n        throw new Error('While reading ' + inputFilePath + ': ' + err);\n      });\n    });\n  });\n}\n\nmodule.exports = {\n  compileAllJsFilesInDir: compileAllJsFilesInDir\n};\n"}