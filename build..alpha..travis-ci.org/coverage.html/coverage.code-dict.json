{"/home/travis/build/npmtest/node-npmtest-traceur/test.js":"/* istanbul instrument in package npmtest_traceur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-traceur/lib.npmtest_traceur.js":"/* istanbul instrument in package npmtest_traceur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_traceur = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_traceur = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-traceur/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-traceur && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_traceur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_traceur\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_traceur.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_traceur.rollup.js'] =\n            local.assetsDict['/assets.npmtest_traceur.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_traceur.__dirname + '/lib.npmtest_traceur.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/api.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Node.js API\n//\n// This is what you get when you `require('traceur')`.\n// It's suppose to be used by custom scripts or tools such as Grunt or Karma.\n\n'use strict';\n\nvar path = require('path');\nvar traceur = require('./traceur.js');\n\nvar NodeCompilerModule = require('./NodeCompiler.js');\nvar NodeCompiler = NodeCompilerModule.NodeCompiler;\n\nvar recursiveModuleCompile = require('./recursiveModuleCompile.js');\nvar compileAllJsFilesInDir = require('./compileAllJsFilesInDir.js');\n\nvar Compiler = traceur.Compiler;\n\nfunction compile(src, options, sourceName, outputName) {\n  sourceName = sourceName || '<compile-source>';\n  outputName = outputName || '<compile-output>';\n  return new NodeCompiler(Compiler.commonJSOptions(options)).\n      compile(src, sourceName, outputName);\n}\n\n// The absolute path to traceur-runtime.js -- the file that should be executed\n// if you want to run Traceur-compiled scripts when the compiler isn't present.\nvar RUNTIME_PATH = path.join(__dirname, '../../bin/traceur-runtime.js').replace(/\\\\/g, '/');\n\n// extend traceur module\nmodule.exports = {\n  __proto__: traceur,\n  recursiveModuleCompileToSingleFile:\n      recursiveModuleCompile.recursiveModuleCompileToSingleFile,\n  forEachRecursiveModuleCompile:\n      recursiveModuleCompile.forEachRecursiveModuleCompile,\n  compileAllJsFilesInDir:\n    compileAllJsFilesInDir.compileAllJsFilesInDir,\n  NodeCompiler: NodeCompiler,\n  compile: compile,\n  commonJSOptions: Compiler.commonJSOptions,\n  amdOptions: Compiler.amdOptions,\n  closureOptions: Compiler.closureOptions,\n  RUNTIME_PATH: RUNTIME_PATH\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/traceur.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar filename = '../../bin/traceur.js';\nfilename = path.join(path.dirname(module.filename), filename);\nvar data = fs.readFileSync(filename, 'utf8');\nif (!data)\n  throw new Error('Failed to import ' + filename);\n\nmodule._compile(data, filename);\n\n// traceur is a module and thus frozen.\nmodule.exports = {\n  __proto__: traceur,\n  get require() {\n    return require('./require.js');\n  },\n  get selfCompiledFilename() {\n    return filename;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/NodeCompiler.js":"// Copyright 2014 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Node.js API\n//\n// This is what you get when you `require('traceur')`.\n// It's suppose to be used by custom scripts or tools such as Grunt or Karma.\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('./file-util.js');\nvar writeFile = util.writeFile;\nvar traceur = require('./traceur.js');\n\nvar Compiler = traceur.Compiler;\n\nfunction NodeCompiler(options, sourceRoot) {\n  sourceRoot = sourceRoot || process.cwd();\n  Compiler.call(this, options, sourceRoot);\n}\n\nNodeCompiler.prototype = {\n  __proto__: Compiler.prototype,\n\n  writeTreeToFile: function(tree, filename) {\n    filename = this.normalize(filename);\n    var compiledCode = this.write(tree, filename);\n    if (this.options_.sourceMaps === 'file') {\n      var sourcemap = this.getSourceMap();\n      if (sourcemap) {\n        var mapName = this.sourceMappingURL(filename);\n        // Write the map file next to the output file.\n        mapName = path.resolve(path.dirname(filename), mapName);\n        writeFile(mapName, sourcemap);\n      }\n    }\n\n    writeFile(filename, compiledCode);\n  },\n\n  compileSingleFile: function(inputFilePath, outputFilePath, errback) {\n    inputFilePath = this.normalize(inputFilePath);\n    outputFilePath = this.normalize(outputFilePath);\n    fs.readFile(inputFilePath, function(err, contents) {\n      if (err) {\n        errback(err);\n        return;\n      }\n\n      var parsed = this.parse(contents.toString(), inputFilePath);\n      this.writeTreeToFile(this.transform(parsed, inputFilePath),\n                           outputFilePath);\n    }.bind(this));\n  },\n\n  sourceMappingURL: function(filename) {\n    if (this.options_.sourceMaps === 'inline') {\n      var base64sm = new Buffer(this.getSourceMap()).toString('base64');\n      return 'data:application/json;base64,' + base64sm;\n    }\n    return Compiler.prototype.sourceMappingURL.call(this, filename);\n  }\n};\n\n\nmodule.exports = {\n  NodeCompiler: NodeCompiler\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/file-util.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar fs = require('fs');\nvar path = require('path');\n\nfunction existsSync(p) {\n  return fs.existsSync ? fs.existsSync(p) : path.existsSync(p);\n}\n\n/**\n * Recursively makes all directoires, similar to mkdir -p\n * @param {string} dir\n */\nfunction mkdirRecursive(dir) {\n  var parts = path.normalize(dir).split(path.sep);\n  dir = '';\n  for (var i = 0; i < parts.length; i++) {\n    dir += parts[i] + path.sep;\n    if (!existsSync(dir)) {\n      fs.mkdirSync(dir, 0x1FD); // 0775 permissions\n    }\n  }\n}\n\n/**\n * Removes the common prefix of basedir and filedir from filedir\n * @param {string} basedir\n * @param {string} filedir\n */\nfunction removeCommonPrefix(basedir, filedir) {\n  var baseparts = basedir.split(path.sep);\n  var fileparts = filedir.split(path.sep);\n\n  var i = 0;\n  while (i < fileparts.length && fileparts[i] === baseparts[i]) {\n    i++;\n  }\n  return fileparts.slice(i).join(path.sep);\n}\n\nfunction writeFile(filename, contents) {\n  // Compute the output path\n  var outputdir = fs.realpathSync(process.cwd());\n  mkdirRecursive(path.dirname(filename));\n  var filedir = fs.realpathSync(path.dirname(filename));\n  filedir = removeCommonPrefix(outputdir, filedir);\n  outputdir = path.join(outputdir, filedir);\n\n  mkdirRecursive(outputdir);\n  var outputfile = path.join(outputdir, path.basename(filename));\n  fs.writeFileSync(outputfile, contents, 'utf8');\n}\n\nfunction normalizePath(s) {\n  return path.sep == '\\\\' ? s.replace(/\\\\/g, '/') : s;\n}\n\nexports.mkdirRecursive = mkdirRecursive;\nexports.normalizePath = normalizePath;\nexports.removeCommonPrefix = removeCommonPrefix;\nexports.writeFile = writeFile;\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/recursiveModuleCompile.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('rsvp').Promise;\nvar nodeLoader = require('./nodeLoader.js');\nvar util = require('./file-util.js');\nvar normalizePath = util.normalizePath;\nvar mkdirRecursive = util.mkdirRecursive;\nvar NodeCompiler = require('./NodeCompiler.js').NodeCompiler;\n\nvar cwd = process.cwd();\n\nfunction revertCwd() {\n  process.chdir(cwd);\n}\n\nfunction recursiveModuleCompileToSingleFile(outputFile, includes, options) {\n  var resolvedOutputFile = path.resolve(outputFile);\n  var outputDir = path.dirname(resolvedOutputFile);\n\n  // Resolve includes before changing directory.\n  var resolvedIncludes = includes.map(function(include) {\n    include.name = path.resolve(include.name);\n    include.rootModule = true;\n    return include;\n  });\n\n  options.bundle = includes.length > 1;\n  var compiler = new NodeCompiler(options);\n\n  mkdirRecursive(outputDir);\n  process.chdir(outputDir);\n  // Make includes relative to output dir so that sourcemap paths are correct.\n  resolvedIncludes = resolvedIncludes.map(function(include) {\n    include.name = normalizePath(path.relative(outputDir, include.name));\n    return include;\n  });\n\n  return recursiveModuleCompile(resolvedIncludes, options)\n      .then(function(tree) {\n        compiler.writeTreeToFile(tree, resolvedOutputFile);\n      }).then(revertCwd, function(err) {\n        revertCwd();\n        throw err;\n      });\n}\n\nfunction forEachRecursiveModuleCompile(outputDir, includes, options) {\n  var outputDir = path.resolve(outputDir);\n  var compiler = new NodeCompiler(options);\n  function getPromise (input) {\n    return recursiveModuleCompile([input], options).then(function(tree) {\n      var outputFileName = path.join(outputDir, input.name);\n      compiler.writeTreeToFile(tree, outputFileName);\n    });\n  }\n  return Promise.all(includes.map(getPromise));\n}\n\nvar TraceurLoader = traceur.loader.TraceurLoader;\nvar InlineLoaderCompiler = traceur.loader.InlineLoaderCompiler;\nvar Options = traceur.util.Options;\n\n/**\n * Chains .then() calls along a list after applying a function. The function\n * is not called on a value in the list until the promise generated by calling\n * the function on the previous value in the list completes.\n *\n * @param {Array.<T>} list\n * @param {function(T): Promise<?>} f A function applied to each item on the\n *     list.\n * @return {Promise<?>} A promise where each promise f(v), for each v in the\n *     list has completed.\n */\nfunction sequencePromises(list, f) {\n  var result = Promise.resolve();\n  list.forEach(function (item) {\n    result = result.then(function() { return f(item); });\n  });\n  return result;\n}\n\n/**\n * Compiles the files in \"fileNamesAndTypes\" along with any associated modules,\n * into a single js file, in module dependency order.\n *\n * @param {Array<Object>} fileNamesAndTypes The list of {name, type}\n *     to compile and concat; type is 'module' or 'script'\n * @param {Object} options A container for misc options. 'referrer' is the\n *     only currently available option.\n * @param {Function} callback Callback used to return the result. A null result\n *     indicates that recursiveModuleCompile has returned successfully from a\n *     non-compile request.\n * @param {Function} errback Callback used to return errors.\n */\nfunction recursiveModuleCompile(fileNamesAndTypes, options) {\n  var referrerName = options && options.referrer;\n\n  var basePath = path.resolve('./') + '/';\n  basePath = basePath.replace(/\\\\/g, '/');\n\n  var elements = [];\n  var loaderCompiler = new InlineLoaderCompiler(elements);\n\n  var loader = new TraceurLoader(nodeLoader, basePath, loaderCompiler);\n\n  function appendEvaluateModule(name) {\n    var normalizedName =\n        $traceurRuntime.ModuleStore.normalize(name, referrerName);\n    // Create tree for $traceurRuntime.getModule('normalizedName');\n    var moduleModule = traceur.codegeneration.module;\n    var tree = moduleModule.createModuleEvaluationStatement(normalizedName);\n    elements.push(tree);\n  }\n\n  function loadInput(input) {\n    var doEvaluateModule = false;\n    var loadFunction = loader.import;\n    var name = input.name;\n\n    var optionsCopy = new Options(options); // Give each load a copy of options.\n\n    if (input.type === 'script') {\n      loadFunction = loader.loadAsScript;\n    } else if (optionsCopy.modules === 'bootstrap') {\n      doEvaluateModule = true;\n    }\n\n    var loadOptions = {\n      referrerName: referrerName,\n      metadata: {\n        traceurOptions: optionsCopy,\n        rootModule: input.rootModule && input.name\n      }\n    };\n\n    return loadFunction.call(loader, name, loadOptions).then(function() {\n      if (doEvaluateModule) {\n        appendEvaluateModule(name);\n      }\n    });\n  }\n\n  return sequencePromises(fileNamesAndTypes, loadInput).then(function() {\n    return loaderCompiler.toTree();\n  });\n}\n\nexports.recursiveModuleCompileToSingleFile = recursiveModuleCompileToSingleFile;\nexports.forEachRecursiveModuleCompile = forEachRecursiveModuleCompile;\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/nodeLoader.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar fs = require('fs');\n\nfunction stripShebang(data) {\n  if (/^#!/.test(data))\n    data = '//' + data;\n  return data;\n}\n\nvar nodeLoader = {\n  load: function(url, callback, errback) {\n    fs.readFile(url, 'utf8', function(err, data) {\n      if (err) {\n        err.message = err.message.replace('ENOENT, open', 'File not found');\n        errback(err);\n      } else {\n        callback(stripShebang(data));\n      }\n    });\n\n    // Returns an abort function.\n    return function() {\n      callback = function() {};\n    };\n  }\n};\n\nmodule.exports = nodeLoader;\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/node/compileAllJsFilesInDir.js":"// Copyright 2013 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar glob = require('glob');\nvar path = require('path');\nvar NodeCompiler = require('./NodeCompiler.js').NodeCompiler;\n\nfunction compileAllJsFilesInDir(inputDir, outputDir, options) {\n  inputDir = path.normalize(inputDir).replace(/\\\\/g, '/');\n  outputDir = path.normalize(outputDir).replace(/\\\\/g, '/');\n  glob(inputDir + '/**/*.js', {}, function (er, files) {\n    if (er)\n      throw new Error('While scanning ' + inputDir + ': ' + er);\n\n    files.forEach(function(inputFilePath) {\n      var outputFilePath = inputFilePath.replace(inputDir, outputDir);\n      var compiler = new NodeCompiler(options);\n      compiler.compileSingleFile(inputFilePath, outputFilePath, function(err) {\n        throw new Error('While reading ' + inputFilePath + ': ' + err);\n      });\n    });\n  });\n}\n\nmodule.exports = {\n  compileAllJsFilesInDir: compileAllJsFilesInDir\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/Compiler.js":"// Copyright 2014 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  AttachModuleNameTransformer\n} from './codegeneration/module/AttachModuleNameTransformer.js';\nimport {FromOptionsTransformer} from './codegeneration/FromOptionsTransformer.js';\nimport {Parser} from './syntax/Parser.js';\nimport {PureES6Transformer} from './codegeneration/PureES6Transformer.js';\nimport {SourceFile} from './syntax/SourceFile.js';\nimport {CollectingErrorReporter} from './util/CollectingErrorReporter.js';\nimport {Options, versionLockedOptions} from './Options.js';\nimport {ParseTreeMapWriter} from './outputgeneration/ParseTreeMapWriter.js';\nimport {ParseTreeWriter} from './outputgeneration/ParseTreeWriter.js';\nimport {\n  SourceMapConsumer,\n  SourceMapGenerator\n} from './outputgeneration/SourceMapIntegration.js';\n\nfunction merge(...srcs) {\n  let dest = Object.create(null);\n  srcs.forEach((src) => {\n    Object.keys(src).forEach((key) => {\n      dest[key] = src[key];\n    });\n    let srcModules = src.modules;  // modules is a getter on prototype\n    if (typeof srcModules !== 'undefined') {\n      dest.modules = srcModules;\n    }\n\n  });\n  return dest;\n}\n\nfunction basePath(name) {\n  if (!name)\n    return null;\n  let lastSlash = name.lastIndexOf('/');\n  if (lastSlash < 0)\n    return null;\n  return name.substring(0, lastSlash + 1);\n}\n\n/**\n * Synchronous source to source compiler using default values for options.\n * @param {Options=} overridingOptions\n */\nexport class Compiler {\n  constructor(overridingOptions = {}) {\n    this.options_ = new Options(this.defaultOptions());\n    this.options_.setFromObject(overridingOptions);\n    // Only used if this.options_.sourceMaps is set.\n    this.sourceMapConfiguration_ = null;\n    // Only used if this.options_sourceMaps = 'memory'.\n    this.sourceMapInfo_ = null;\n    // Used to cache source map calculation\n    this.sourceMapCache_ = null;\n  }\n  /**\n   * Use Traceur to compile ES6 type=script source code to ES5 script.\n   *\n   * @param  {string} content ES6 source code.\n   * @param  {Object=} options Traceur options to override defaults.\n   * @return {Promise<{js: string, errors: Array, sourceMap: string}>} Transpiled code.\n   */\n  static script(content, options = {}) {\n    options = new Options(options);  // fresh copy, don't write on argument.\n    options.script = true;\n    return new Compiler(options).compile(content);\n  }\n  /**\n   * Use Traceur to compile ES6 module source code to 'bootstrap' module format.\n   *\n   * @param  {string} content ES6 source code.\n   * @param  {Object=} options Traceur options to override defaults.\n   * @return {Promise<{js: string, errors: Array, sourceMap: string}>} Transpiled code.\n   */\n  static module(content, options = {}) {\n    options = new Options(options);  // fresh copy, don't write on argument.\n    options.modules = 'bootstrap';\n    return new Compiler(options).compile(content);\n  }\n  /**\n   * Options to create 'amd' module format.\n   *\n   * @param  {Object=} options Traceur options to override defaults.\n   * @return {Object}\n   */\n  static amdOptions(options = {}) {\n    let amdOptions = {\n      modules: 'amd',\n      sourceMaps: false,\n      moduleName: false\n    };\n    return merge(amdOptions, options);\n  }\n  /**\n   * Options to create 'goog'/Closure module format.\n   *\n   * @param  {Object=} options Traceur options to override defaults.\n   * @return {Object}\n   */\n  static closureOptions(options = {}) {\n    let closureOptions = {\n      modules: 'closure',\n      sourceMaps: false,\n      moduleName: true\n    };\n    return merge(closureOptions, options);\n  }\n  /**\n   * Options to create 'commonjs' module format.\n   *\n   * @param  {Object=} options Traceur options to override defaults.\n   * @return {Object}\n   */\n  static commonJSOptions(options = {}) {\n    let commonjsOptions = {\n      modules: 'commonjs',\n      sourceMaps: false,\n      moduleName: false\n    };\n    return merge(commonjsOptions, options);\n  }\n\n  /**\n   * Compile ES6 source code with Traceur.\n   *\n   * @param {string} content ES6 source code.\n   * @param {string} sourceName\n   * @param {string} outputName\n   * @param {string} sourceRoot defaults to dir of outputName\n   * @return {string} equivalent ES5 source.\n   */\n  compile(content, sourceName = '<compileSource>',\n      outputName = '<compileOutput>', sourceRoot = undefined) {\n\n    sourceName = this.normalize(sourceName);\n    outputName = this.normalize(outputName);\n    let tree = this.parse(content, sourceName);\n    tree = this.transform(tree, sourceName);\n    // Attach the sourceURL only if the input and output names differ.\n    let sourceURL = sourceName !== outputName ? sourceName : undefined;\n    // The sourceRoot argument takes precidence over the option.\n    if (sourceRoot === undefined)\n      sourceRoot = this.options_.sourceRoot;\n\n    return this.write(tree, outputName, sourceRoot, sourceURL);\n  }\n\n  throwIfErrors(errorReporter) {\n    if (errorReporter.hadError())\n      throw errorReporter.toError();\n  }\n\n  /**\n   * @param {string} content to be compiled.\n   * @param {string} sourceName inserted into sourceMaps\n   * @return {ParseTree}\n   */\n  parse(content, sourceName = '<compiler-parse-input>') {\n    sourceName = this.normalize(sourceName);\n    this.sourceMapCache_ = null;\n    this.sourceMapConfiguration_ = null;\n\n    let errorReporter = new CollectingErrorReporter();\n    let sourceFile = new SourceFile(sourceName, content);\n    let parser = new Parser(sourceFile, errorReporter, this.options_);\n    let tree =\n        this.options_.script ? parser.parseScript() : parser.parseModule();\n    this.throwIfErrors(errorReporter);\n\n    return tree;\n  }\n\n  /**\n   * Apply transformations selected by options to tree.\n   * @param {ParseTree} tree\n   * @param {string} candidateModuleName used as the moduleName iff the\n   *    moduleName option is set true\n   * @return {ParseTree}\n   */\n  transform(tree, candidateModuleName = undefined, metadata = undefined) {\n\n    let transformer;\n    if (candidateModuleName) {\n      let transformer = new AttachModuleNameTransformer(candidateModuleName);\n      tree = transformer.transformAny(tree);\n    }\n\n    let errorReporter = new CollectingErrorReporter();\n\n    if (this.options_.outputLanguage.toLowerCase() === 'es6') {\n      transformer = new PureES6Transformer(errorReporter, this.options_, metadata);\n    } else {\n      transformer = new FromOptionsTransformer(errorReporter, this.options_);\n    }\n\n    let transformedTree = transformer.transform(tree);\n    this.throwIfErrors(errorReporter);\n    return transformedTree;\n  }\n\n  createSourceMapConfiguration_(outputName, sourceRoot = undefined,\n      sourceURL = undefined) {\n    if (this.options_.sourceMaps) {\n      return {\n        sourceMapGenerator: new SourceMapGenerator({\n          file: outputName,\n          sourceRoot: sourceRoot,\n          skipValidation: true\n        }),\n        basepath: basePath(outputName),\n        inputSourceMap: this.options_.inputSourceMap,\n        sourceURL: sourceURL,\n        outputName: outputName\n      };\n    }\n  }\n\n  getSourceMap() {\n    if (this.sourceMapCache_) {\n      return this.sourceMapCache_;\n    }\n\n    if (this.sourceMapConfiguration_) {\n      let sourceMap = this.sourceMapConfiguration_.sourceMapGenerator.toString();\n      let inputSourceMap = this.sourceMapConfiguration_.inputSourceMap;\n      if (inputSourceMap) {\n        let generator = SourceMapGenerator.fromSourceMap(\n            new SourceMapConsumer(sourceMap));\n        generator.applySourceMap(new SourceMapConsumer(inputSourceMap));\n        sourceMap = generator.toJSON();\n      }\n      this.sourceMapCache_ = sourceMap;\n      return sourceMap;\n    }\n  }\n\n  get sourceMapInfo() {\n    if (!this.sourceMapInfo_ && this.sourceMapConfiguration_) {\n      let sourceMap = this.getSourceMap();\n      // The source map info for in-memory maps\n      this.sourceMapInfo_ = {\n        url: this.sourceMapConfiguration_.sourceURL,\n        outputName: this.sourceMapConfiguration_.outputName,\n        map: sourceMap\n      };\n    }\n    return this.sourceMapInfo_;\n  }\n\n  /**\n   * Produce output source from tree.\n   * @param {ParseTree} tree\n   * @param {string} outputName used for sourceMap URL and default sourceRoot.\n   * @param {string} sourceRoot base for sourceMap sources\n   * @param {string} sourceURL value for sourceURL\n   * @return {string}\n   */\n  write(tree, outputName = undefined, sourceRoot = undefined,\n      sourceURL = undefined) {\n    outputName = this.normalize(outputName);\n\n    if (sourceRoot === undefined)\n      sourceRoot = this.options_.sourceRoot;\n\n    if (sourceRoot === true)\n      sourceRoot = basePath(outputName);\n    else if (!sourceRoot) // false or '' or undefined\n      sourceRoot = undefined;\n    else\n      sourceRoot = this.normalize(sourceRoot);\n\n    let writer;\n    this.sourceMapCache_ = null;\n    this.sourceMapConfiguration_ =\n        this.createSourceMapConfiguration_(outputName, sourceRoot, sourceURL);\n    if (this.sourceMapConfiguration_) {\n      this.sourceMapConfiguration_.lowResolution =\n          this.options_.lowResolutionSourceMap;\n      writer =\n          new ParseTreeMapWriter(this.sourceMapConfiguration_, this.options_);\n    } else {\n      writer = new ParseTreeWriter(this.options_);\n    }\n\n    writer.visitAny(tree);\n\n    let compiledCode = writer.toString();\n\n    let link = this.debuggerLink(sourceURL, outputName);\n    if (link) {\n      compiledCode += link;\n    }\n\n    return compiledCode;\n  }\n\n  debuggerLink(sourceURL, outputName) {\n    if (this.sourceMapConfiguration_) {\n      if (this.options_.sourceMaps === 'memory') {\n        return;\n      }\n      let sourceMappingURL =\n         this.sourceMappingURL(sourceURL || outputName || 'unnamed.js');\n      return '//# sourceMappingURL=' + sourceMappingURL + '\\n';\n    } else {\n      if (sourceURL) {\n        return '//# sourceURL=' + sourceURL + '\\n';\n      }\n    }\n  }\n\n  sourceName(filename) {\n    return filename;\n  }\n\n  sourceMappingURL(path) {\n    // This implementation works for browsers. The NodeCompiler overrides\n    // to use nodejs functions.\n    if (this.options_.sourceMaps === 'inline') {\n      if (Reflect.global.btoa) {\n        return 'data:application/json;base64,' +\n            btoa(unescape(encodeURIComponent(this.getSourceMap())));\n      }\n    }\n    path = path || 'unamed.js';\n    path = path.split('/').pop();\n    return path + '.map';\n  }\n\n  sourceNameFromTree(tree) {\n    return tree.location.start.source.name;\n  }\n\n  defaultOptions() {\n    return versionLockedOptions;\n  }\n\n  normalize(name) {\n    return name && name.replace(/\\\\/g,'/');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/HTMLImportTranscoder.js":"// Copyright 2015 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Applies Traceur to HTML Import scripts related to a Web page.\nimport {StringMap} from './util/StringMap.js';\nimport {WebPageTranscoder, scriptSelector} from './WebPageTranscoder.js';\n\nconst importSelector = 'link[rel=import][href]';\n\nexport class HTMLImportTranscoder {\n\n  constructor() {\n    this.importsToProcess_ = [];\n  }\n\n  findAllChildrenHTMLImports_(parentImportNodes) {\n    let foundImportNodes = [];\n\n    // process any import children\n    for (let parentIndex = 0; parentIndex < parentImportNodes.length; parentIndex++) {\n      let parentLink = parentImportNodes[parentIndex];\n      let childImportNodes = parentLink.import.querySelectorAll(importSelector);\n      if (childImportNodes.length > 0)\n        this.findAllChildrenHTMLImports_(childImportNodes);\n\n      this.importsToProcess_.push(parentLink);\n    }\n  }\n\n  filterHTMLImports_(importNodes) {\n    // process any import children\n    this.findAllChildrenHTMLImports_(importNodes);\n\n    // find all scripts to import\n    let importsToParse = [];\n    let dupFilterMap = new StringMap();\n    for (let index = 0; index < this.importsToProcess_.length; index++) {\n      let processLink = this.importsToProcess_[index];\n      if (!dupFilterMap.has(processLink.href)) {\n        dupFilterMap.set(processLink.href, 0);\n        let scripts = processLink.import.querySelectorAll(scriptSelector);\n        if (scripts.length > 0)\n          importsToParse.push({href: processLink.href, scripts: scripts});\n      }\n    }\n\n    this.importsToProcess_ = [];\n    return importsToParse;\n  }\n\n  selectAndProcessHTMLImports(importNodes, done) {\n    // extract all imports and their child imports\n    let importInfoList = this.filterHTMLImports_(importNodes);\n    if (importInfoList.length === 0)\n      done();\n\n    // creates a transcoder for each HTMLImport and parse their script elements\n    let processCount = importInfoList.length;\n    importInfoList.forEach((importInfo) => {\n      let transcoder = new WebPageTranscoder(importInfo.href);\n      transcoder.addFilesFromScriptElements(importInfo.scripts, () => {\n        processCount--;\n        if (processCount === 0 && done)\n          done();\n      });\n    });\n  }\n\n  run(done = () => {}) {\n    let ready = document.readyState;\n    if (ready === 'complete' || ready === 'loaded') {\n      let importNodes = document.querySelectorAll(importSelector);\n      if (importNodes.length > 0)\n        this.selectAndProcessHTMLImports(importNodes, done);\n    } else {\n      document.addEventListener('HTMLImportsLoaded',\n        (event) => {\n          let importNodes = event.detail && event.detail.allImports ? event.detail.allImports : document.querySelectorAll(importSelector);\n          if (importNodes.length > 0)\n            this.selectAndProcessHTMLImports(importNodes, done);\n        });\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/Options.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nfunction enumerableOnlyObject(obj) {\n  let result = Object.create(null);\n  Object.keys(obj).forEach(function(key) {\n    Object.defineProperty(result, key, {enumerable: true, value: obj[key]});\n  });\n  return result;\n}\n\n// Traceur sets these default options and no others for v 0.1.*\nexport const optionsV01 = enumerableOnlyObject({\n  annotations: false,\n  arrayComprehension: false,\n  arrowFunctions: true,\n  asyncFunctions: false,\n  asyncGenerators: false,\n  blockBinding: true,\n  classes: true,\n  commentCallback: false,\n  computedPropertyNames: true,\n  debug: false,\n  debugNames: false,\n  defaultParameters: true,\n  destructuring: true,\n  exponentiation: false,\n  exportFromExtended: false,\n  forOf: true,\n  forOn: false,\n  freeVariableChecker: false,\n  generatorComprehension: false,\n  generators: true,\n  importRuntime: false,\n  inputSourceMap: false,\n  jsx: false,\n  lowResolutionSourceMap: false,\n  memberVariables: false,\n  moduleName: 'default',\n  modules: 'bootstrap',\n  numericLiterals: true,\n  outputLanguage: 'es5',\n  properTailCalls: false,\n  propertyMethods: true,\n  propertyNameShorthand: true,\n  referrer: '',\n  require: false,\n  restParameters: true,\n  script: false,\n  sourceMaps: false,\n  sourceRoot: false,\n  spread: true,\n  spreadProperties: false,\n  symbols: true,\n  templateLiterals: true,\n  types: false,\n  unicodeEscapeSequences: true,\n  unicodeExpressions: true,\n  validate: false,\n});\n\nexport const versionLockedOptions = optionsV01;\n\n// Options are just a plain old object. There are two read only views on this\n// object, parseOptions and transformOptions.\n//\n// To set an option you do `options.classes = true`.\n//\n// An option value is either true, false or a string. If the value is set to\n// the string \"parse\" then the transformOption for that option\n// will return false. For example:\n//\n//   options.destructuring = 'parse';\n//   options.parseOptions.destructuring === true;\n//   options.transformOptions.destructuring === false;\n//\n// This allows you to parse certain features without transforming them, leaving\n// the syntax intact in the output.\n\nlet defaultValues = Object.create(null);\nlet featureOptions = Object.create(null);\nlet experimentalOptions = Object.create(null);\nlet moduleOptions =\n    ['amd', 'commonjs', 'closure', 'instantiate', 'inline', 'bootstrap', 'parse'];\n\nconst EXPERIMENTAL = 0;\nconst ON_BY_DEFAULT = 1;\n\n/**\n * Adds a feature option. Feature options can be tested with parseOptions\n * and transformOptions.\n */\nfunction addFeatureOption(name, kind) {\n  featureOptions[name] = true;\n\n  if (kind === EXPERIMENTAL)\n    experimentalOptions[name] = true;\n\n  let defaultValue = kind === ON_BY_DEFAULT;\n  defaultValues[name] = defaultValue;\n}\n\n/**\n * Adds a simple boolean option.\n */\nfunction addBoolOption(name) {\n  defaultValues[name] = false;\n}\n\n// ON_BY_DEFAULT\naddFeatureOption('arrowFunctions', ON_BY_DEFAULT);     // 13.2\naddFeatureOption('blockBinding', ON_BY_DEFAULT);       // 12.1\naddFeatureOption('classes', ON_BY_DEFAULT);            // 13.5\naddFeatureOption('computedPropertyNames', ON_BY_DEFAULT);  // 11.1.5\naddFeatureOption('defaultParameters', ON_BY_DEFAULT);  // Cant find in the spec\naddFeatureOption('destructuring', ON_BY_DEFAULT);      // 11.13.1\naddFeatureOption('forOf', ON_BY_DEFAULT);              // 12.6.4\naddFeatureOption('generators', ON_BY_DEFAULT); // 13.4\naddFeatureOption('modules', 'SPECIAL');    // 14\naddFeatureOption('numericLiterals', ON_BY_DEFAULT);\naddFeatureOption('propertyMethods', ON_BY_DEFAULT);    // 13.3\naddFeatureOption('propertyNameShorthand', ON_BY_DEFAULT);\naddFeatureOption('restParameters', ON_BY_DEFAULT);     // 13.1\naddFeatureOption('sourceMaps', 'SPECIAL');\naddFeatureOption('spread', ON_BY_DEFAULT);             // 11.1.4, 11.2.5\naddFeatureOption('symbols', ON_BY_DEFAULT);\naddFeatureOption('templateLiterals', ON_BY_DEFAULT);   // 7.6.8\naddFeatureOption('unicodeEscapeSequences', ON_BY_DEFAULT);  // 11.8.4\naddFeatureOption('unicodeExpressions', ON_BY_DEFAULT);\n\n// EXPERIMENTAL due to performance impact although properly part of ES6\naddFeatureOption('properTailCalls', EXPERIMENTAL);\n\n// EXPERIMENTAL\naddFeatureOption('annotations', EXPERIMENTAL);\naddFeatureOption('arrayComprehension', EXPERIMENTAL); // 11.4.1.2\naddFeatureOption('asyncFunctions', EXPERIMENTAL);\naddFeatureOption('asyncGenerators', EXPERIMENTAL);\naddFeatureOption('exponentiation', EXPERIMENTAL);\naddFeatureOption('exportFromExtended', EXPERIMENTAL);\naddFeatureOption('forOn', EXPERIMENTAL);\naddFeatureOption('generatorComprehension', EXPERIMENTAL);\naddFeatureOption('importRuntime', EXPERIMENTAL);\naddFeatureOption('jsx', EXPERIMENTAL);\naddFeatureOption('memberVariables', EXPERIMENTAL);\naddFeatureOption('require', EXPERIMENTAL);\naddFeatureOption('spreadProperties', EXPERIMENTAL);\naddFeatureOption('types', EXPERIMENTAL);\n\nlet transformOptionsPrototype = {};\n\nObject.keys(featureOptions).forEach((name) => {\n  Object.defineProperty(transformOptionsPrototype, name, {\n    get: function() {\n      let v = this.proxiedOptions_[name];\n      if (v === 'parse')\n        return false;\n      return v;\n    },\n    enumerable: true\n  });\n});\n\nlet parseOptionsPrototype = {};\n\nObject.keys(featureOptions).forEach((name) => {\n  Object.defineProperty(parseOptionsPrototype, name, {\n    get: function() {\n      return !!this.proxiedOptions_[name];\n    },\n    enumerable: true\n  });\n});\n\n\naddBoolOption('commentCallback');\naddBoolOption('debug');\naddBoolOption('debugNames');\naddBoolOption('freeVariableChecker');\naddBoolOption('script');\naddBoolOption('validate');\n\nexport class Options {\n\n  constructor(options = Object.create(null)) {\n    this.reset();\n\n    // Make sure non option fields are non enumerable.\n    Object.defineProperties(this, {\n      modules_: {\n        value: versionLockedOptions.modules,\n        writable: true,\n        enumerable: false\n      },\n      sourceMaps_: {\n        value: versionLockedOptions.sourceMaps,\n        writable: true,\n        enumerable: false\n      },\n      sourceRoot_: {\n        value: versionLockedOptions.sourceRoot,\n        writable: true,\n        enumerable: false\n      },\n      transformOptions: {\n        value: Object.create(transformOptionsPrototype, {\n          proxiedOptions_: {\n            value: this,\n            enumerable: false\n          }}),\n        enumerable: false\n      },\n      parseOptions: {\n        value: Object.create(parseOptionsPrototype, {\n          proxiedOptions_: {\n            value: this,\n            enumerable: false\n          }}),\n        enumerable: false\n      }\n    });\n\n    this.setFromObject(options);\n  }\n\n  /**\n   * Meta option. Sets all options that are of Kind.experimental\n   * When getting this will return null if not all options of this kind\n   * have the same value.\n   * @type {boolean|string|null}\n   */\n  set experimental(v) {\n    v = coerceOptionValue(v);\n    Object.keys(experimentalOptions).forEach((name) => {\n      this[name] = v;\n    });\n  }\n\n  get experimental() {\n    let value;\n    Object.keys(experimentalOptions).every((name) => {\n      let currentValue = this[name];\n      if (value === undefined) {\n        value = currentValue;\n        return true;\n      }\n      if (currentValue !== value) {\n        value = null;\n        return false;\n      }\n      return true;\n    });\n    return value;\n  }\n\n  /**\n   * @return {Options} with every experimental option set true.\n   */\n  static experimental() {\n    return new Options(experimentalOptions);\n  }\n\n  get atscript() {\n    return this.types && this.annotations && this.memberVariables;\n  }\n\n  set atscript(value) {\n    this.types = value;\n    this.annotations = value;\n    this.memberVariables = value;\n  }\n\n  /**\n   * @return {Options} with every atScript option set true.\n   */\n  static atscript() {\n    return new Options({types: true, annotations: true, memberVariables: true});\n  }\n\n  get modules() {\n    return this.modules_;\n  }\n\n  set modules(value) {\n    if (typeof value === 'boolean' && !value)\n      value = 'bootstrap';\n    if (moduleOptions.indexOf(value) === -1) {\n      throw new Error('Invalid \\'modules\\' option \\'' + value + '\\', not in ' +\n        moduleOptions.join(', '));\n    }\n    this.modules_ = value;\n  }\n\n  get sourceMaps() {\n    return this.sourceMaps_;\n  }\n\n  set sourceMaps(value) {\n    if (value === null || typeof value === 'boolean') {\n      this.sourceMaps_ = value ? 'file' : false;\n      return;\n    }\n    if (value === 'file' || value === 'inline' || value === 'memory') {\n      this.sourceMaps_ = value;\n    } else {\n      throw new Error('Option sourceMaps should be ' +\n          '[false|inline|file|memory], not ' + value);\n    }\n  }\n\n  /**\n   * Resets all options to the default value or to false if |allOff| is\n   * true.\n   * @param {boolean=} allOff\n   */\n  reset(allOff = undefined) {\n    let useDefault = allOff === undefined;\n    Object.keys(defaultValues).forEach((name) => {\n      this[name] = useDefault && defaultValues[name];\n    });\n    this.setDefaults();\n  }\n  /**\n   * Set values for non-boolean options.  Some non-boolean options allow\n   * boolean values.\n   */\n  setDefaults() {\n    this.modules = 'bootstrap';\n    this.moduleName = 'default';\n    this.outputLanguage = 'es5';\n    this.referrer = '';\n    this.sourceMaps = false;\n    this.sourceRoot = false;\n    this.lowResolutionSourceMap = false;\n    this.inputSourceMap = false;\n  }\n\n  static listUnknownOptions(obj) {\n    let unknowns = [];\n    Object.keys(obj).forEach((propName) => {\n      if (!(propName in optionsV01)) {\n        unknowns.push(propName);\n      }\n    });\n    return unknowns;\n  }\n  /**\n   * Sets the options based on an object.\n   */\n  setFromObject(object) {\n    Object.keys(this).forEach((name) => {\n      if (name in object)\n        this.setOption(name, object[name]);\n    });\n    this.modules = object.modules || this.modules;\n    if (typeof object.sourceMaps === 'boolean' ||\n        typeof object.sourceMaps === 'string') {\n      this.sourceMaps = object.sourceMaps;\n    }\n    if (object.sourceRoot !== undefined)\n      this.sourceRoot = object.sourceRoot;\n    return this;\n  }\n\n  setOption(name, value) {\n    name = toCamelCase(name);\n    if (name in this) {\n      this[name] = value;\n    } else {\n      throw Error('Unknown option: ' + name);\n    }\n  }\n\n  diff(ref) {\n    let mismatches = [];\n    Object.keys(this).forEach((key) => {\n      if (this[key] !== ref[key]) {\n        mismatches.push({\n          key: key,\n          now: $traceurRuntime.options[key],\n          v01: ref[key]\n        });\n      }\n    });\n    return mismatches;\n  }\n\n};\n\n\n// TODO: Refactor this so that we can keep all of these in one place.\nlet descriptions = {\n  experimental: 'Turns on all experimental features',\n  require: 'Generate require function argument for node when modules=register',\n  sourceMaps: 'Generate source map and (\\'file\\') write to .map' +\n      ' or (\\'inline\\') append data URL',\n};\n\nexport class CommandOptions extends Options {\n\n  /**\n   * Takes a string and parses it and sets the options based on that\n   * string.\n   */\n  static fromString(s) {\n    return CommandOptions.fromArgv(s.split(/\\s+/));\n  }\n\n  /**\n   * Takes an array of command line params and sets the options based on that.\n   */\n  static fromArgv(args) {\n    let options = new CommandOptions();\n    args.forEach((arg) => options.parseCommand(arg));\n    return options;\n  }\n  /**\n   * Parses a part of a command line and sets the respective option.\n   * The following patterns are supported.\n   *\n   *   --spread, --spread=true\n   *   --spread=parse\n   *   --spread=false\n   *   --arrowFunctions --arrow-functions\n   *   --modules=amd\n   */\n  parseCommand(s) {\n    let re = /--([^=]+)(?:=(.+))?/;\n    let m = re.exec(s);\n\n    if (m)\n      this.setOptionCoerced(m[1], m[2]);\n  }\n\n  setOptionCoerced(name, value) {\n    // commander.js give value = null if no argument follows --option-name\n    if (typeof value !== 'undefined' && value !== null)\n      value = coerceOptionValue(value);\n    else\n      value = true;\n\n    this.setOption(name,  value);\n  }\n\n}\n\nfunction coerceOptionValue(v) {\n  switch (v) {\n    case 'false':\n      return false;\n    case 'true':\n    case true:\n      return true;\n    default:\n      // Falsey values will be false.\n      return !!v && String(v);\n  }\n}\n\n/**\n * Converts a string from aaa-bbb-ccc to aaaBbbCcc.\n */\nfunction toCamelCase(s) {\n  return s.replace(/-\\w/g, function(ch) {\n    return ch[1].toUpperCase();\n  });\n}\n\n/**\n * Converts a string from aaaBbbCcc to aaa-bbb-ccc.\n */\nexport function toDashCase(s) {\n  return s.replace(/[A-Z]/g, function(ch) {\n    return '-' + ch.toLowerCase();\n  });\n}\n\n/**\n * TODO(jjb): move to src/node\n * This is called by build.js to add options to the commander command line\n * library.\n * @param {Commander} flags The commander object.\n */\nexport function addOptions(flags, commandOptions) {\n  // Start with the non-boolean options.\n  flags.option('--referrer <name>',\n      'Bracket output code with System.referrerName=<name>',\n      (name) => {\n        commandOptions.setOption('referrer', name);\n        System.map = System.semverMap(name);\n        return name;\n      });\n  flags.option('--modules <' + moduleOptions.join(', ') + '>',\n      'select the output format for modules',\n      (moduleFormat) => {\n        commandOptions.modules = moduleFormat;\n      });\n  flags.option('--moduleName [true|false|default]',\n    'true for named, false for anonymous modules; default depends on --modules',\n    (moduleName) => {\n      if (moduleName === 'true')\n        moduleName = true;\n      else if (moduleName === 'false')\n        moduleName = false;\n      else\n        moduleName = 'default';\n      commandOptions.moduleName = moduleName;\n    });\n  flags.option('--outputLanguage <es6|es5>',\n    'compilation target language',\n    (outputLanguage) => {\n      if (outputLanguage === 'es6' || outputLanguage === 'es5')\n        commandOptions.outputLanguage = outputLanguage;\n      else\n        throw new Error('outputLanguage must be one of es5, es6');\n  });\n  flags.option('--source-maps [file|inline|memory]',\n    'sourceMaps generated to file or inline with data: URL',\n    (to) => { return commandOptions.sourceMaps = to; }\n  );\n  flags.option('--source-root <true|false|string>',\n    'sourcemap sourceRoot value. false to omit, ' +\n        'true for directory of output file.',\n    (to) => {\n      if (to === 'false')\n        to = false;\n      else if (to === 'true')\n        to = true;\n      return commandOptions.sourceRoot = to;\n    }\n  );\n  flags.option('--low-resolution-source-maps',\n    'Lower sourceMaps granularity to one mapping per output line',\n    () => { return commandOptions.lowResolutionSourceMap = true; }\n  );\n  flags.option('--experimental',\n    'Turns on all experimental features',\n    () => { commandOptions.experimental = true; }\n  );\n\n  flags.option('--atscript',\n    'Turns on all AtScript features',\n    () => { commandOptions.atscript = true; }\n  );\n\n  Object.keys(commandOptions).forEach(function(name) {\n    let dashedName = toDashCase(name);\n    if (flags.optionFor('--' + name) || flags.optionFor('--' + dashedName)) {\n      return;   // non-boolean already in flags.\n    } else if (name in featureOptions) {\n      flags.option('--' + dashedName + ' [true|false|parse]',\n                   descriptions[name]);\n      flags.on(dashedName, (value) =>\n        commandOptions.setOptionCoerced(dashedName, value));\n    } else if (commandOptions[name] !== null) {\n      flags.option('--' + dashedName, descriptions[name]);\n      flags.on(dashedName, () => commandOptions.setOption(dashedName, true));\n    } else {\n      throw new Error('Unexpected null commandOption ' + name);\n    }\n  });\n  // After we've processed the commandOptions, set defaults for commandOptions.\n  commandOptions.setDefaults();\n}\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/WebPageTranscoder.js":"// Copyright 2011 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Applies Traceur to all scripts in a Web page.\n\nimport {ErrorReporter} from './util/ErrorReporter.js';\nimport {CommandOptions} from './Options.js';\nimport {webLoader} from './loader/webLoader.js';\n\nexport const scriptSelector = 'script[type=\"module\"],script[type=\"text/traceur\"]';\n\nexport class WebPageTranscoder {\n  constructor(url = document.location.href,\n      traceurOptions = new Options()) {\n    this.url = url;\n    this.numPending_ = 0;\n    this.numberInlined_ = 0;\n    this.traceurOptions_ = traceurOptions;\n  }\n\n  asyncLoad_(url, fncOfContent, onScriptsReady) {\n    this.numPending_++;\n    webLoader.load(url, (content) => {\n      if (content)\n        fncOfContent(content);\n      else\n        console.warn('Failed to load', url);\n\n      if (--this.numPending_ <= 0)\n        onScriptsReady();\n    }, (error) => {\n      console.error('WebPageTranscoder FAILED to load ' +\n          url, error.stack || error);\n    });\n  }\n\n  addFileFromScriptElement(scriptElement, name, content) {\n    let options = this.traceurOptions_;\n    let elementOptionString = scriptElement.getAttribute('traceurOptions');\n    if (elementOptionString) {\n      options = CommandOptions.fromString(elementOptionString);\n    }\n    let nameInfo = {\n      address: name,\n      referrerName: window.location.href,\n      name: name,\n      metadata: {traceurOptions: options}\n    };\n    let loadingResult;\n    if (scriptElement.type === 'module')\n      loadingResult = System.module(content, nameInfo);\n    else\n      loadingResult = System.script(content, nameInfo);\n    loadingResult.catch(function(error) {\n      console.error(error.stack || error);\n    });\n  }\n\n  /**\n   * Invent a name for inline script tags:\n   * @return {string} the page URL, drop .html, add eg \"_1.js\"\n   */\n  nextInlineScriptName_() {\n    this.numberInlined_ += 1;\n    if (!this.inlineScriptNameBase_) {\n      let segments = this.url.split('.');\n      segments.pop();\n      this.inlineScriptNameBase_ = segments.join('.');\n    }\n    return this.inlineScriptNameBase_ + '_inline_script_' +\n        this.numberInlined_ + '.js';\n  }\n\n  addFilesFromScriptElements(scriptElements, onScriptsReady) {\n    for (let i = 0, length = scriptElements.length; i < length; i++) {\n      let scriptElement = scriptElements[i];\n      if (!scriptElement.src) {\n        let name = this.nextInlineScriptName_();\n        let content =  scriptElement.textContent;\n        this.addFileFromScriptElement(scriptElement, name, content);\n      } else {\n        let name = scriptElement.src;\n        this.asyncLoad_(\n            name,\n            this.addFileFromScriptElement.bind(this, scriptElement, name),\n            onScriptsReady\n        );\n      }\n    }\n    // in case we did not load any scripts async\n    if (this.numPending_ <= 0)\n      onScriptsReady();\n  }\n\n  get reporter() {\n    if (!this.reporter_) {\n      this.reporter_ =  new ErrorReporter();\n    }\n    return this.reporter_;\n  }\n\n  putFile(file) {\n    let scriptElement = document.createElement('script');\n    scriptElement.setAttribute('data-traceur-src-url', file.name);\n    scriptElement.textContent = file.generatedSource;\n\n    let parent = file.scriptElement.parentNode;\n    parent.insertBefore(scriptElement, file.scriptElement || null);\n  }\n\n  selectAndProcessScripts(done) {\n    let selector = scriptSelector;\n    let scripts = document.querySelectorAll(selector);\n\n    if (!scripts.length) {\n      done();\n      return;  // nothing to do\n    }\n\n    this.addFilesFromScriptElements(scripts, () => {\n      done();\n    });\n  }\n\n  run(done = () => {}) {\n    let ready = document.readyState;\n    if (ready === 'complete' || ready === 'loaded') {\n      this.selectAndProcessScripts(done);\n    } else {\n      document.addEventListener('DOMContentLoaded',\n        () => this.selectAndProcessScripts(done), false);\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/bootstrap.js":"// Copyright 2011 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSystem.loadScriptTypeModule(/* Use default options */);\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/compiler-imports.js":"// Copyright 2015 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport {Compiler} from './Compiler.js';\n\nimport {Parser} from './syntax/Parser.js';\nimport {Script} from './syntax/trees/ParseTrees.js';\nimport {SourceFile} from './syntax/SourceFile.js';\n\nexport let syntax = {\n  Parser,\n  SourceFile,\n  trees: {\n    Script\n  }\n};\n\nimport {ParseTreeMapWriter} from './outputgeneration/ParseTreeMapWriter.js';\nimport {ParseTreeWriter} from './outputgeneration/ParseTreeWriter.js';\nimport {regexpuRewritePattern} from './outputgeneration/regexpuRewritePattern.js';\nimport {SourceMapConsumer} from './outputgeneration/SourceMapIntegration.js';\nimport {SourceMapGenerator} from './outputgeneration/SourceMapIntegration.js';\nimport {TreeWriter} from './outputgeneration/TreeWriter.js';\n\nexport let outputgeneration = {\n  ParseTreeMapWriter,\n  ParseTreeWriter,\n  regexpuRewritePattern,\n  SourceMapConsumer,\n  SourceMapGenerator,\n  TreeWriter\n};\n\nimport {AttachModuleNameTransformer} from './codegeneration/module/AttachModuleNameTransformer.js';\nimport {CloneTreeTransformer} from './codegeneration/CloneTreeTransformer.js';\nimport {FromOptionsTransformer} from './codegeneration/FromOptionsTransformer.js';\nimport {PureES6Transformer} from './codegeneration/PureES6Transformer.js';\nimport {createModuleEvaluationStatement} from './codegeneration/module/createModuleEvaluationStatement.js';\nimport {parseExpression, parseModule, parseScript, parseStatement} from './codegeneration/PlaceholderParser.js';\n\nexport let codegeneration = {\n  CloneTreeTransformer,\n  FromOptionsTransformer,\n  PureES6Transformer,\n  parseExpression,\n  parseModule,\n  parseScript,\n  parseStatement,\n  module: {\n    AttachModuleNameTransformer,\n    createModuleEvaluationStatement\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/traceur-import.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport * as traceur from './traceur.js';\n\n// Export traceur as a global property.\nReflect.global.traceur = traceur;\n\n// TODO(jjb):  import ModuleStore once we merge the static and dynamic modules.\n$traceurRuntime.ModuleStore.set('traceur@', traceur);\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/traceur.js":"// Copyright 2012 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport * from './util-imports.js';\nexport * from './compiler-imports.js';\nexport * from './loader/loader-imports.js';\n","/home/travis/build/npmtest/node-npmtest-traceur/node_modules/traceur/src/util-imports.js":"// Copyright 2015 Traceur Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Used by unit tests only\nimport './util/MutedErrorReporter.js';\n\nexport {WebPageTranscoder} from './WebPageTranscoder.js';\nexport {HTMLImportTranscoder} from './HTMLImportTranscoder.js';\nimport {addOptions, CommandOptions, Options} from './Options.js';\n\nimport {ErrorReporter} from './util/ErrorReporter.js';\nimport {CollectingErrorReporter} from './util/CollectingErrorReporter.js';\n\nexport let util = {\n  addOptions,\n  CommandOptions,\n  CollectingErrorReporter,\n  ErrorReporter,\n  Options\n};\n\n"}